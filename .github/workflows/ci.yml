name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Node.js environment and cache dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Install Dependencies
      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      # Verify Nx Installation
      - name: Check Nx Installation
        run: npx nx --version

      # Run Affected Lint
      - name: Run Affected Lint
        run: npx nx affected --target=lint --parallel=3 --base=main --head=HEAD

      # Run Affected Unit Tests
      - name: Run Affected Unit Tests
        run: npx nx affected --target=test --parallel=3 --base=main --head=HEAD

      # Build Affected Projects
      - name: Build Affected Projects
        run: npx nx affected --target=build --parallel=3 --base=main --head=HEAD

      # Run Affected E2E Tests
      - name: Run Affected E2E Tests
        run: npx nx affected --target=e2e --parallel=3 --base=main --head=HEAD

      # Deploy Affected Projects to Vercel
      - name: Deploy Affected Projects to Vercel
        run: |
          affected_apps=$(npx nx affected:apps --base=main --head=HEAD)
          for app in $affected_apps; do
            echo "Checking app: $app"
            if [[ "$app" == "sweet-sye-app" || "$app" == "nicoletta-portfolio-app" ]]; then
              echo "Deploying $app to Vercel..."
              npx vercel --cwd=apps/$app --token=$VERCEL_TOKEN --prod
            else
              echo "Skipping $app as it's not a deployable app."
            fi
          done
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      # End Nx Cloud Distributed CI
      - name: Stop Nx Cloud Distributed CI
        run: npx nx-cloud stop-ci-run
