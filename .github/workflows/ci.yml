name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Main Branch Exists
        run: git fetch origin main

      - name: Determine Base Branch
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "BASE_BRANCH=$(git rev-parse origin/main~1)" >> $GITHUB_ENV
          else
            echo "BASE_BRANCH=${{ github.base_ref || 'main' }}" >> $GITHUB_ENV
          fi

      - name: Debug Base Branch
        run: git log $BASE_BRANCH --oneline -n 1

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      - name: Generate Deployable Apps List
        run: |
          deployable_apps=$(find apps -type f -name vercel.json -exec jq -r '.name' {} \; | tr '\n' ' ')
          echo "DEPLOYABLE_APPS=$deployable_apps" >> $GITHUB_ENV

      - name: Debug Deployable Apps
        run: 'echo "Deployable apps: \$DEPLOYABLE_APPS"'
        
      - name: Deploy Affected Projects to Vercel
        run: |
          affected_apps=$(npx nx affected:apps --base=$BASE_BRANCH --head=HEAD || echo "")

          if [[ -z "$affected_apps" ]]; then
            echo "No affected apps detected. Skipping deployment."
            exit 0
          fi

          echo "Affected apps: $affected_apps"

          for app in $affected_apps; do
            echo "Checking app: $app"
            if echo "$DEPLOYABLE_APPS" | grep -q "^$app$"; then
              echo "Deploying $app to Vercel..."
              npx vercel --cwd=apps/$app/$app-app --token=$VERCEL_TOKEN --prod || {
                echo "Failed to deploy $app" >&2
                exit 1
              }
            else
              echo "Skipping $app as it's not a deployable app."
            fi
          done
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
