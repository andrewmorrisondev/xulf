generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  role              String   @default("user")

  accounts          Account[]
  sessions          Session[]
  userOrganizations UserOrganization[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?   
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invite {
  id         String   @id @default(cuid())
  email      String   @unique
  used       Boolean  @default(false)
  invitedBy  String?  // optional admin user ID
  orgId      String?  // optional: for future org-level invites
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Organization {
  id                String   @id @default(uuid())
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relation fields
  sites             Site[]
  userOrganizations UserOrganization[]
}

model Site {
  id              String   @id @default(uuid())
  name            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign key to Organization
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
}

model UserOrganization {
  userId         String
  organizationId String
  role           String   // or an enum in Prisma if you prefer

  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId]) // Composite primary key
}
