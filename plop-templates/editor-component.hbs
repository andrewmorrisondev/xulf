import React from 'react';

/**
 * {{pascalCase name}}Editor is a flexible layout container designed specifically for the editor.
 * It includes extra visual cues for editing like selection borders and drag handles.
 */
export interface {{pascalCase name}}EditorProps {
  orientation?: 'horizontal' | 'vertical';
  alignItems?: 'flex-start' | 'center' | 'flex-end' | 'stretch' | 'baseline';
  justifyContent?: 'flex-start' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'flex-end';
  gap?: { row?: number; column?: number };
  customStyles?: string;
  children?: React.ReactNode;
}

/** Parses a raw CSS string into a valid React style object */
function parseInlineStyles(css: string): React.CSSProperties {
  const style: React.CSSProperties = {};
  css.split(';').forEach((decl) => {
    const [prop, value] = decl.split(':').map((s) => s.trim());
    if (prop && value) {
      const jsProp = prop.replace(/-([a-z])/g, (_, c) => c.toUpperCase());
      (style as any)[jsProp] = value;
    }
  });
  return style;
}

export const {{pascalCase name}}Editor = ({
  orientation = 'vertical',
  alignItems = 'stretch',
  justifyContent = 'flex-start',
  gap,
  customStyles,
  children,
}: {{pascalCase name}}EditorProps) => {
  const style: React.CSSProperties = {
    display: 'flex',
    flexDirection: orientation === 'horizontal' ? 'row' : 'column',
    alignItems,
    justifyContent,
    rowGap: gap?.row ?? 0,
    columnGap: gap?.column ?? 0,
    ...parseInlineStyles(customStyles ?? ''),
  };

  return (
    <div
      style={style}
      className="editor-box" // Specific editor styling
    >
      {children}
    </div>
  );
};

export default {{pascalCase name}}Editor;
